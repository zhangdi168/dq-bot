///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package dq_keywords

import (
	"fmt"
	"time"

	"github.com/zhangdi168/dq-bot/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *DqKeywords {
	return new(DqKeywords)
}

func NewQueryBuilder() *dqKeywordsQueryBuilder {
	return new(dqKeywordsQueryBuilder)
}

func (t *DqKeywords) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type dqKeywordsQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *dqKeywordsQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *dqKeywordsQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&DqKeywords{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *dqKeywordsQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&DqKeywords{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *dqKeywordsQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&DqKeywords{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *dqKeywordsQueryBuilder) First(db *gorm.DB) (*DqKeywords, error) {
	ret := &DqKeywords{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *dqKeywordsQueryBuilder) QueryOne(db *gorm.DB) (*DqKeywords, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *dqKeywordsQueryBuilder) QueryAll(db *gorm.DB) ([]*DqKeywords, error) {
	var ret []*DqKeywords
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *dqKeywordsQueryBuilder) Limit(limit int) *dqKeywordsQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *dqKeywordsQueryBuilder) Offset(offset int) *dqKeywordsQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereId(p mysql.Predicate, value int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereIdIn(value []int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereIdNotIn(value []int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderById(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereWord(p mysql.Predicate, value string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "word", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereWordIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "word", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereWordNotIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "word", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByWord(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "word "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereSorted(p mysql.Predicate, value int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sorted", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereSortedIn(value []int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sorted", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereSortedNotIn(value []int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sorted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderBySorted(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "sorted "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereMatchType(p mysql.Predicate, value string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "match_type", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereMatchTypeIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "match_type", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereMatchTypeNotIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "match_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByMatchType(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "match_type "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereReplyType(p mysql.Predicate, value string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply_type", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereReplyTypeIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply_type", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereReplyTypeNotIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByReplyType(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "reply_type "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereTouchType(p mysql.Predicate, value string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "touch_type", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereTouchTypeIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "touch_type", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereTouchTypeNotIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "touch_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByTouchType(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "touch_type "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereReplyJson(p mysql.Predicate, value string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply_json", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereReplyJsonIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply_json", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereReplyJsonNotIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply_json", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByReplyJson(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "reply_json "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WherePluginId(p mysql.Predicate, value int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "plugin_id", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WherePluginIdIn(value []int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "plugin_id", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WherePluginIdNotIn(value []int32) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "plugin_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByPluginId(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "plugin_id "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereRemark(p mysql.Predicate, value string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereRemarkIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereRemarkNotIn(value []string) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByRemark(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "remark "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereCreateAt(p mysql.Predicate, value time.Time) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_at", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereCreateAtIn(value []time.Time) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_at", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereCreateAtNotIn(value []time.Time) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByCreateAt(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_at "+order)
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereUpdateAt(p mysql.Predicate, value time.Time) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_at", p),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereUpdateAtIn(value []time.Time) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_at", "IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) WhereUpdateAtNotIn(value []time.Time) *dqKeywordsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dqKeywordsQueryBuilder) OrderByUpdateAt(asc bool) *dqKeywordsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "update_at "+order)
	return qb
}
